Description: CD12352 - Infrastructure as Code Project - Udagram

Parameters:
  PriSubnetCidr1:
    Description: Enter the CIDR block for private subnet 1
    Type: String
  PriSubnetCidr2:
    Description: Enter the CIDR block for private subnet 2
    Type: String
  #   Default: 10.0.0.0/16
  AZID1:
    Description: Availabity-zone 1
    Type: String
  AZID2:
    Description: Availabity-zone 2
    Type: String
  InstanceType:
    Description: Instance type of EC2
    Type: String
    Default: t2.micro
  NetworkStackName:
    Description: Stack name for importing
    Type: String
    Default: NetworkStack
  LaunchTLName:
    Description: Launch template name
    Type: String
    Default: UdagramStack-launch-template
  KeyPairName:
    Description: Key pair 
    Type: String
    Default: UdagramKeyPair


Resources:
  # ------- SG for Loadbalancer
  LBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For EC2 launch template
      GroupName: UdaSG-LB
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:  # Outbound rules
        - IpProtocol: "-1"  # -1 allows all protocols
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0  # Allows all outbound traffic
      VpcId: 
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VpcId"
      Tags: 
        - Key: Name
          Value: UdaSG-LB


  # --------- Loadbalancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: uda-loadbalancer
      SecurityGroups: 
        - !Ref LBSG
      Subnets: 
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-PublicSubnet1"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-PublicSubnet2"
      Type: application 

  # --------- S3 bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub udacity-${AWS::AccountId}-bucket-20241107
      Tags:
        - Key: Name
          Value: !Sub udacity-${AWS::AccountId}-bucket-20241107
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ----- Key pair
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Ref KeyPairName
      KeyType: ed25519
      PublicKeyMaterial: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKl7LnHegxxeLA+A9hBmq/sZKoPUZp5zWUtxShUzCaTP tungplatin@gmail.com

  #------ EC2 Security Group:
  EC2SecurityGr:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For EC2 launch template
      GroupName: UdaSG-EC2
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 217.15.161.68/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSG
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: UdaSG-EC2
      VpcId: 
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VpcId"

  # ----- EC2 role access S3 bucket
  UdaEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: UdaEC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'  # Bucket ARN
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'  # Objects in the bucket


  #----------- EC2 Launch Template
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref UdaEC2Role
  WebAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Ref LaunchTLName
      LaunchTemplateData: # AZ adding
        InstanceType: t2.micro
        ImageId: ami-0866a3c8686eaeeba   # ubuntu image
        KeyName: !Ref KeyPairName
        IamInstanceProfile: 
          Name: !Ref EC2InstanceProfile
        SecurityGroupIds:
          - !Ref EC2SecurityGr
        UserData:
          Fn::Base64: |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start

  # ------- Autoscaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: 
      - WebAppLaunchTemplate
    Properties:
      AutoScalingGroupName: AutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref WebAppLaunchTemplate
        Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
      DesiredCapacity: 1
      DesiredCapacityType: units
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-PrivateSubnet1"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-PrivateSubnet2"
      MaxSize: 4
      MinSize: 1
      
Outputs:
  LoadBalancerURL:
    Description: The URL of LoadBalancer
    Value: !Sub "http://${LoadBalancer.DNSName}"